# steve.a.mccluskey@gmail.com
# Runs as a background process when weatherStation.py is launched. Reads the config file to get temp/room assignments, reads all the required sensors and writes them to 
# /html/mount/data/sensorValuesNew.json



import os
import time
import glob
import json
import datetime
import os.path
from os import path
os.system('modprobe w1-gpio')
os.system('modprobe w1-therm')

sensorIds = os.listdir("/sys/bus/w1/devices")

config_file = "/home/pi/weatherStation/sensorIndex.config"

rooms = ['livingRoom', 'upstairs', 'office', 'guestRoom', 'stevesRoom', 'attic', 'basement', 'freezer', 'sammyDoor', 'garage', 'outside', 'incubator', 'fruiting']

ids   = [0] * len(rooms)
temps = [0] * len(rooms)


def read_temp(file):
	device_file = "/sys/bus/w1/devices/" + file + "/w1_slave"
	if (path.exists(device_file)):
		try:
			f = open (device_file, 'r') 
			lines = f.readlines()
			f.close()

			pos = lines[1].find('t=')

			if (pos != -1):
				temp_string = lines[1][pos + 2:]
				temp_c = float(temp_string) / 1000.0
				#temp_f = format(float((temp_c * 1.8) + 32.0), '.1f')
				temp_f = format((temp_c * 1.8 + 32.0), '.1f')
				return temp_f

		except:
			return "Off"
	else:
		return "Off"


while True:
	try:
		data = {
			"sensors": {},
			"timestamp":[
			]
		}

		#open config file generated by config script:
		f = open(config_file, 'r')
		lines = f.readlines()
		f.close()

		#get length of file:
		count = len(lines)

		#loop thru config file and get each rooms temp:
		for i in range(count):
			for x in range(len(rooms)):
				#find first room in file:
				if (lines[i].find(str(rooms[x])) != -1):
					#find start of sensor id after livingRoom in config file
					slot = lines[i].find('=')

					#get sensor ID assigned to room
					ids[i] = str(lines[i][slot + 2 : slot + 17])

					#if not null, get its raw temp in w1_slave file:
					if (ids[i].find('null') == -1):
						temps[i] = read_temp(ids[i])

					#sensor not assigned to room, set id and temp to null:
					else:
						ids[i]   = "unassigned"
						temps[i] = "---"
			#add sensor data to data object:
			data["sensors"][str(rooms[i])] = {'id': str(ids[i]), 'temp': str(temps[i])}

		#add time stamp to data object:
		dateTimeObj = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
		data["timestamp"].append({'dateTime': str(dateTimeObj)})

		with open('/var/www/html/mount/data/sensorValuesNew.json', 'w') as g:
			json.dump(data, g, indent = 2)
		time.sleep(2)

	except:
		pass


